<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="6" failed="0" total="6" passed="0">
  <reporter-output>
  </reporter-output>
  <suite name="Default suite" duration-ms="67070" started-at="2014-11-24T11:41:57Z" finished-at="2014-11-24T11:43:05Z">
    <groups>
    </groups>
    <test name="Default test" duration-ms="67070" started-at="2014-11-24T11:41:57Z" finished-at="2014-11-24T11:43:05Z">
      <class name="Tests.WhenUserLoginToApplication">
        <test-method status="FAIL" signature="setUp()[pri:0, instance:Tests.WhenUserLoginToApplication@1fa78298]" name="setUp" is-config="true" duration-ms="0" started-at="2014-11-24T12:41:57Z" finished-at="2014-11-24T12:41:57Z">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Timed out after 5 seconds waiting for Base.UI$1@67257ce8
Build info: version: '2.43.1', revision: '5163bce', time: '2014-09-10 16:27:33'
System info: host: 'rafal', ip: '192.168.1.4', os.name: 'Windows 7', os.arch: 'amd64', os.version: '6.1', java.version: '1.7.0_71'
Session ID: 97b0ed880a044531ae8807c53701f0b0
Driver info: org.openqa.selenium.remote.RemoteWebDriver
Capabilities [{automationName=appium, platform=LINUX, javascriptEnabled=true, hasMetadata=true, browserName=Android, desired={automationName=appium, platformVersion=4.4, deviceName=Android Emulator, platformName=Android, proxy={"proxyAutoconfigUrl":"http://127.0.0.1:19876/proxy.pac","proxyType":"PAC"}, webdriver.remote.quietExceptions=true}, webdriver.remote.sessionid=97b0ed880a044531ae8807c53701f0b0, platformVersion=4.4, databaseEnabled=false, platformName=Android, deviceName=Android Emulator, webStorageEnabled=false, proxy={"proxyAutoconfigUrl":"http://127.0.0.1:19876/proxy.pac","proxyType":"PAC"}, webdriver.remote.quietExceptions=true, warnings={}, takesScreenshot=true}]]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Timed out after 5 seconds waiting for Base.UI$1@67257ce8
Build info: version: '2.43.1', revision: '5163bce', time: '2014-09-10 16:27:33'
System info: host: 'rafal', ip: '192.168.1.4', os.name: 'Windows 7', os.arch: 'amd64', os.version: '6.1', java.version: '1.7.0_71'
Session ID: 97b0ed880a044531ae8807c53701f0b0
Driver info: org.openqa.selenium.remote.RemoteWebDriver
Capabilities [{automationName=appium, platform=LINUX, javascriptEnabled=true, hasMetadata=true, browserName=Android, desired={automationName=appium, platformVersion=4.4, deviceName=Android Emulator, platformName=Android, proxy={"proxyAutoconfigUrl":"http://127.0.0.1:19876/proxy.pac","proxyType":"PAC"}, webdriver.remote.quietExceptions=true}, webdriver.remote.sessionid=97b0ed880a044531ae8807c53701f0b0, platformVersion=4.4, databaseEnabled=false, platformName=Android, deviceName=Android Emulator, webStorageEnabled=false, proxy={"proxyAutoconfigUrl":"http://127.0.0.1:19876/proxy.pac","proxyType":"PAC"}, webdriver.remote.quietExceptions=true, warnings={}, takesScreenshot=true}]
	at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:79)
	at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
	at Base.UI.WaitForElement(UI.java:105)
	at Base.UI.WaitAndClick(UI.java:91)
	at Page.LogInPage.TapXSkip(LogInPage.java:48)
	at Action.GoTo.WallView(GoTo.java:21)
	at Tests.WhenUserLoginToApplication.setUp(WhenUserLoginToApplication.java:28)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:564)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:213)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:138)
	at org.testng.internal.TestMethodWorker.invokeBeforeClassMethods(TestMethodWorker.java:175)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:107)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="SKIP" signature="ShouldDisplayNameDateAndResponceButton()[pri:0, instance:Tests.WhenUserLoginToApplication@1fa78298]" name="ShouldDisplayNameDateAndResponceButton" duration-ms="3" started-at="2014-11-24T12:43:05Z" finished-at="2014-11-24T12:43:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ShouldDisplayNameDateAndResponceButton -->
        <test-method status="SKIP" signature="ScreenshotWhenFail(org.testng.ITestResult)[pri:0, instance:Tests.WhenUserLoginToApplication@1fa78298]" name="ScreenshotWhenFail" is-config="true" duration-ms="0" started-at="2014-11-24T12:43:05Z" finished-at="2014-11-24T12:43:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ScreenshotWhenFail -->
        <test-method status="SKIP" signature="BackToWallPage()[pri:0, instance:Tests.WhenUserLoginToApplication@1fa78298]" name="BackToWallPage" is-config="true" duration-ms="0" started-at="2014-11-24T12:43:05Z" finished-at="2014-11-24T12:43:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BackToWallPage -->
        <test-method status="SKIP" signature="ShouldDisplayShareProfileAndNotificationButton()[pri:0, instance:Tests.WhenUserLoginToApplication@1fa78298]" name="ShouldDisplayShareProfileAndNotificationButton" duration-ms="0" started-at="2014-11-24T12:43:05Z" finished-at="2014-11-24T12:43:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ShouldDisplayShareProfileAndNotificationButton -->
        <test-method status="SKIP" signature="ScreenshotWhenFail(org.testng.ITestResult)[pri:0, instance:Tests.WhenUserLoginToApplication@1fa78298]" name="ScreenshotWhenFail" is-config="true" duration-ms="0" started-at="2014-11-24T12:43:05Z" finished-at="2014-11-24T12:43:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ScreenshotWhenFail -->
        <test-method status="SKIP" signature="BackToWallPage()[pri:0, instance:Tests.WhenUserLoginToApplication@1fa78298]" name="BackToWallPage" is-config="true" duration-ms="0" started-at="2014-11-24T12:43:05Z" finished-at="2014-11-24T12:43:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BackToWallPage -->
        <test-method status="SKIP" signature="BackToWallPage()[pri:0, instance:Tests.WhenUserLoginToApplication@1fa78298]" name="BackToWallPage" is-config="true" duration-ms="0" started-at="2014-11-24T12:43:05Z" finished-at="2014-11-24T12:43:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BackToWallPage -->
        <test-method status="SKIP" signature="ShouldGoToAddShareDialog()[pri:0, instance:Tests.WhenUserLoginToApplication@1fa78298]" name="ShouldGoToAddShareDialog" duration-ms="0" started-at="2014-11-24T12:43:05Z" finished-at="2014-11-24T12:43:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ShouldGoToAddShareDialog -->
        <test-method status="SKIP" signature="ScreenshotWhenFail(org.testng.ITestResult)[pri:0, instance:Tests.WhenUserLoginToApplication@1fa78298]" name="ScreenshotWhenFail" is-config="true" duration-ms="0" started-at="2014-11-24T12:43:05Z" finished-at="2014-11-24T12:43:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ScreenshotWhenFail -->
        <test-method status="SKIP" signature="ShouldGoToFilterFeedView()[pri:0, instance:Tests.WhenUserLoginToApplication@1fa78298]" name="ShouldGoToFilterFeedView" duration-ms="1" started-at="2014-11-24T12:43:05Z" finished-at="2014-11-24T12:43:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ShouldGoToFilterFeedView -->
        <test-method status="SKIP" signature="BackToWallPage()[pri:0, instance:Tests.WhenUserLoginToApplication@1fa78298]" name="BackToWallPage" is-config="true" duration-ms="0" started-at="2014-11-24T12:43:05Z" finished-at="2014-11-24T12:43:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BackToWallPage -->
        <test-method status="SKIP" signature="ScreenshotWhenFail(org.testng.ITestResult)[pri:0, instance:Tests.WhenUserLoginToApplication@1fa78298]" name="ScreenshotWhenFail" is-config="true" duration-ms="0" started-at="2014-11-24T12:43:05Z" finished-at="2014-11-24T12:43:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ScreenshotWhenFail -->
        <test-method status="SKIP" signature="ShouldGoToNotificationView()[pri:0, instance:Tests.WhenUserLoginToApplication@1fa78298]" name="ShouldGoToNotificationView" duration-ms="1" started-at="2014-11-24T12:43:05Z" finished-at="2014-11-24T12:43:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ShouldGoToNotificationView -->
        <test-method status="SKIP" signature="BackToWallPage()[pri:0, instance:Tests.WhenUserLoginToApplication@1fa78298]" name="BackToWallPage" is-config="true" duration-ms="0" started-at="2014-11-24T12:43:05Z" finished-at="2014-11-24T12:43:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BackToWallPage -->
        <test-method status="SKIP" signature="ScreenshotWhenFail(org.testng.ITestResult)[pri:0, instance:Tests.WhenUserLoginToApplication@1fa78298]" name="ScreenshotWhenFail" is-config="true" duration-ms="0" started-at="2014-11-24T12:43:05Z" finished-at="2014-11-24T12:43:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ScreenshotWhenFail -->
        <test-method status="SKIP" signature="ShouldGoToYourProfileView()[pri:0, instance:Tests.WhenUserLoginToApplication@1fa78298]" name="ShouldGoToYourProfileView" duration-ms="1" started-at="2014-11-24T12:43:05Z" finished-at="2014-11-24T12:43:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ShouldGoToYourProfileView -->
        <test-method status="SKIP" signature="ScreenshotWhenFail(org.testng.ITestResult)[pri:0, instance:Tests.WhenUserLoginToApplication@1fa78298]" name="ScreenshotWhenFail" is-config="true" duration-ms="0" started-at="2014-11-24T12:43:05Z" finished-at="2014-11-24T12:43:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ScreenshotWhenFail -->
        <test-method status="SKIP" signature="BackToWallPage()[pri:0, instance:Tests.WhenUserLoginToApplication@1fa78298]" name="BackToWallPage" is-config="true" duration-ms="0" started-at="2014-11-24T12:43:05Z" finished-at="2014-11-24T12:43:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BackToWallPage -->
        <test-method status="SKIP" signature="tearDown()[pri:0, instance:Tests.WhenUserLoginToApplication@1fa78298]" name="tearDown" is-config="true" duration-ms="0" started-at="2014-11-24T12:43:05Z" finished-at="2014-11-24T12:43:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- Tests.WhenUserLoginToApplication -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
